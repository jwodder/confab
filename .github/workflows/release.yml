name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - '*-?v[0-9]+*'

env:
  CARGO_DIST_VERSION: 0.0.5

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      has-releases: ${{ steps.create-release.outputs.has-releases }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install Rust
        run: |
          rustup update stable --no-self-update
          rustup default stable

      - name: Install cargo-dist
        run: curl --proto '=https' --tlsv1.2 -LsSf https://github.com/axodotdev/cargo-dist/releases/download/v$CARGO_DIST_VERSION/cargo-dist-v$CARGO_DIST_VERSION-installer.sh | sh

      - name: Create release
        id: create-release
        run: |
          set -ex
          cargo dist manifest --tag=${{ github.ref_name }} --artifacts=all --no-local-paths --output-format=json > dist-manifest.json
          cat dist-manifest.json

          ANNOUNCEMENT_TITLE=$(jq --raw-output ".announcement_title" dist-manifest.json)
          IS_PRERELEASE=$(jq --raw-output ".announcement_is_prerelease" dist-manifest.json)
          jq --raw-output ".announcement_github_body" dist-manifest.json > new_dist_announcement.md
          gh release create ${{ github.ref_name }} --draft --prerelease="$IS_PRERELEASE" --title="$ANNOUNCEMENT_TITLE" --notes-file=new_dist_announcement.md

          gh release upload ${{ github.ref_name }} dist-manifest.json

          HAS_RELEASES=$(jq --raw-output ".releases != null" dist-manifest.json)
          echo "has-releases=$HAS_RELEASES" >> "$GITHUB_OUTPUT"

  upload-artifacts:
    runs-on: ${{ matrix.os }}
    needs: create-release
    if: needs.create-release.outputs.has-releases == 'true'
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            dist-args: --artifacts=global
            install-dist: curl --proto '=https' --tlsv1.2 -LsSf https://github.com/axodotdev/cargo-dist/releases/download/v$CARGO_DIST_VERSION/cargo-dist-v$CARGO_DIST_VERSION-installer.sh | sh
          - os: macos-11
            dist-args: --artifacts=local --target=aarch64-apple-darwin --target=x86_64-apple-darwin
            install-dist: curl --proto '=https' --tlsv1.2 -LsSf https://github.com/axodotdev/cargo-dist/releases/download/v$CARGO_DIST_VERSION/cargo-dist-v$CARGO_DIST_VERSION-installer.sh | sh
          - os: ubuntu-20.04
            # TODO: Check if this works: (Will require adding the extra targets
            # to the cargo-dist config):
            #dist-args: --artifacts=local --target=aarch64-unknown-linux-gnu --target=i686-unknown-linux-gnu --target=x86_64-unknown-linux-gnu
            dist-args: --artifacts=local --target=x86_64-unknown-linux-gnu
            install-dist: curl --proto '=https' --tlsv1.2 -LsSf https://github.com/axodotdev/cargo-dist/releases/download/v$CARGO_DIST_VERSION/cargo-dist-v$CARGO_DIST_VERSION-installer.sh | sh
          - os: windows-2019
            dist-args: --artifacts=local --target=x86_64-pc-windows-msvc
            install-dist: irm https://github.com/axodotdev/cargo-dist/releases/download/v$Env:CARGO_DIST_VERSION/cargo-dist-v$Env:CARGO_DIST_VERSION-installer.ps1 | iex
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install Rust
        run: |
          rustup update stable --no-self-update
          rustup default stable

      - name: Install cargo-dist
        run: ${{ matrix.install-dist }}

      - name: Run cargo-dist
        shell: bash
        run: |
          cargo dist build \
            --tag=${{ github.ref_name }} \
            --output-format=json \
            ${{ matrix.dist-args }} > dist-manifest.json
          jq -j '.artifacts[]?.path | select(. != null) | "\(.)\u0000"' dist-manifest.json | \
            xargs -0 gh release upload ${{ github.ref_name }}

  publish-release:
    needs: [create-release, upload-artifacts]
    if: |
      always()
      && needs.create-release.result == 'success'
      && (needs.upload-artifacts.result == 'skipped'
          || needs.upload-artifacts.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Mark release as non-draft
        run: gh release edit --repo ${{ github.repository }} ${{ github.ref_name }} --draft=false
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
